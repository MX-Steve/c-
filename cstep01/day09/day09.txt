1.数组可以作为形式参数使用
	1.数组做形式参数的时候只是把形式参数写成数组的样子，真正的形式参数并不是数组
	2.数组形式参数里包含的所有存储区不是被调用函数提供的
	3.声明数组形式参数的时候可以省略中括号里的数字
	4.使用数组做形式参数的时候需要另外提供一个整数类型形式参数用来表示数组里的存储区个数

2.使用数组形式参数可以让被调用函数使用其他函数提供的存储区

3.调用函数和被调用函数都可以自由使用数组形式参数里包含的存储区
	1.数组形式参数可以实现双向数据传递，具有这种特征的参数叫输入输出参数

4.C语言里函数形式参数的个数可以不固定,这种参数叫变长参数
	1.不可以在编写函数的时候给变长参数命名
  2.在被调用函数里需要使用特殊的方法获得变长参数的内容
	3.如果编译器首先遇到函数调用语句就会猜测函数的格式。猜测结果认为函数有一个整数类型存储区用来存放返回值，函数有任意多个不确定类型的形式参数。这个猜测结果叫做函数的隐式声明
	4.函数隐式声明里形式参数的类型只能是int或double
	5.如果函数的隐式声明格式和函数的真实格式不同,就会编译出错
	
	6.函数大括号前面的部分可以单独写成一条语句，这种语句叫函数声明语句
	7.函数声明语句里可以省略形式参数名称
	8.可以把函数声明语句单独写在文件开头，这叫做函数的显式声明
		1.函数显式声明可以避免隐式声明的出现
		2.除了主函数以外的所有函数都应该进行显式声明

exit标准函数可以随时结束程序的执行
为了使用这个标准函数需要包含stdlib.h头文件
这个函数需要一个整数类型的实际参数，这个
    参数的作用和主函数返回值的作用一样

C语言里函数可以调用自己
能调用自己的函数叫递归函数

如果一个问题可以拆分成多个小问题，其中
   至少一个小问题本质上和原来的问题一样，
   只是稍微简单一点。这种问题就可以采用
   递归函数解决。

递归函数编写步骤
1.编写语句解决分解后的每个小问题(假设
       递归函数已经可以使用了)
2.在递归函数的开头编写分支语句处理
    不可分解的情况(这个分支必须
    让函数结束)

采用递归函数解决问题的思路叫递归
采用循环解决类似问题的思路叫递推

检验递归函数的时候可以先用最简单的
    参数检验，然后逐渐把参数变的
    复杂一点再检验。如果所有参数都
    能得到正确结果就说明递归函数
    编写正确。

能使用某个变量的所有语句叫做这个变量
    的作用域
声明在函数里面的变量叫做局部变量，它
    的作用域就是函数里面的所有语句
声明在所有函数外边的变量叫做全局变量，
    它的作用域是程序里的所有语句
没有初始化的全局变量自动被初始化成0
全局变量和局部变量可以重名，这个时候
    变量名称优先代表局部变量
如果全局变量和局部变量都能解决问题就
    应该优先选择局部变量

存储区的使用不受作用域限制(可以跨
    函数使用存储区)
存储区的使用受到生命周期的限制
生命周期是一段时间，在生命周期开始的时候
   计算机为程序分配存储区，在生命周期结束
   的时候计算机把分配给程序的存储区收回
全局变量的生命周期是整个程序执行时间
局部变量的生命周期是函数某一次执行的时间
    范围
当函数开始的时候计算机为局部变量分配存储区，
    当函数结束的时候计算机把局部变量的
    存储区收回
如果函数多次执行则每次函数执行的时候局部
    变量对应的存储区都可能不同

使用static关键字声明的变量叫做静态变量
静态变量的生命周期和作用域和普通变量不同
全局变量和局部变量都可以声明成静态变量
所有静态变量的生命周期都是整个程序执行时间
静态局部变量的存储区随时可以使用
静态局部变量的作用域和普通局部变量的作用域
    一样
没有初始化的静态变量自动被初始化成0
静态局部变量的初始化只在程序开始的时候
    执行一次
静态全局变量的作用域只包含声明它的那个
   文件里的所有语句(不可以跨文件使用静态
    全局变量)

变量的作用域分三种情况：局部变量，静态
    全局变量，非静态全局变量
变量的生命周期分两种情况：非静态的局部
    变量，其他所有变量

预习：
    1.指针






