1.指针数组里每个存储区都是指针类型的存储区

2.字符指针数组里包含多个字符类型的指针，每个指针可以代表一个字符串

3.字符指针数组可以用来代表多个相关字符串

4.主函数的第二个参数就是一个字符指针数组，其中每个指针代表一个字符串。所有这些字符串的内容都来自于用户输入的命令。

5.主函数的第一个参数是一个整数，它表示第二个参数里有效指针的个数

预处理指令
1.#define是一个预处理指令，它可以用来定义宏

2.宏可以用来给数字起名字

定义宏的时候要把宏名称写在前面，把它所
    代表的数字写在后面
宏名称通常由大写英文字母构成
宏名称里不可以包含空格
用宏给数字起名字的时候不要使用赋值操作符
编译器会把程序里的所有宏名称替换成它所
    代表的数字

可以在编译命令里使用-D选项指定宏所代表
   的数字

如果编写程序的时候不知道某些数字的数值就
    可以先用宏名称代表它们，然后在编译
    的时候再指定数值

宏也可以用来给计算公式起名字
计算公式里包含未知数字，用宏的参数表示
    这些未知数字

编译器采用两次替换方式处理带参数的宏

宏的参数不一定代表数字，所以没有类型名称
如果宏有多个参数就应该使用逗号把多个
    参数名称分开

宏不可以使用自己的存储区和函数进行数据
    传递
宏没有形式参数也没有用来记录返回值的
    存储区

能当作数字使用的宏必须写成表达式（因为
    宏没有用来记录返回值的存储区）

宏的参数可以直接代表函数的存储区，修改
    参数的内容就是修改函数存储区的内容

因为宏没有用来记录返回值的存储区，所以
    不能保证优先计算宏里面的操作符
能当作数字使用的宏必须写在一对小括号里面

宏没有形式参数所以不能保证优先计算参数
    里面的操作符
编写宏的时候所有能当作数字使用的参数都
    应该写在小括号里面

不要把自增或自减的结果作为宏的参数使用

编写宏的时候可以使用一些特殊的符号，它们
    叫做宏操作符
#是一个宏操作符，它可以把宏的参数转换
    成字符串字面值
##也是一个宏操作符，它可以把宏的一个
    代表标识符的参数和其它内容连接
    得到一个新的标识符

条件编译可以在编译的时候从几组语句里
    选择一组编译而忽略其它组
#ifdef/#ifndef...#else...#endif
以上结构可以实现条件编译，它可以根据一个
    宏名称是否被定义过从两组语句里选择
    一组编译
这个结构最开始的预处理指令应该从两个里
    选择一个，不论选那个后面都要跟一个
    宏名称
如果最开始选择#ifdef就表示它后面的宏名称
    被定义过的时候编译前一组语句，否则
    编译后一组语句
如果选择#ifndef效果刚好和#ifdef相反

#if...#elif(任意多次)...#else...#endif
这个结构也可以实现条件编译，它可以根据
    任意逻辑表达式从多组语句中选择一组
    编译
#if和#elif预处理指令之后都需要写逻辑
    表达式，它们的作用和if分支里的if
    以及else if 关键字一样

多文件编程的时候一个文件里可以包含多个
    函数，一个函数只能属于一个文件

多文件编程基本步骤
1.把程序里的函数分散在多个源文件里
    (主函数通常单独放在一个文件里)
2.为每个源文件编写配对的以.h作为扩展名
    的头文件(主函数所在的文件不需要配对
    头文件).所有不分配内存的内容都可以
    写在头文件里，头文件里至少要包含
    配对源文件里所有函数的声明。
3.在每个源文件里使用#include预处理指令
    包含必要的头文件(配对头文件是必要头
    文件，如果源文件使用了某个头文件里
    声明的函数则这个头文件也是必要头文件)

在gcc命令后列出所有源文件路径就可以编译
    多文件编写的程序

可以把多文件程序的编译过程记录到Makefile里，
   然后使用make工具根据Makefile文件内容
   执行编译过程

所有头文件内容都应该被包含在预处理指令
    中间,这样是为了避免多次编译
第一个预处理指令必须是#ifndef

头文件里使用的宏名称必须和头文件的
    名称对应,这是为了避免多个头文件
    使用同样的宏名称

预习：
    1.结构体




