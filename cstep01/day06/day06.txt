无法预知的数字叫做随机数
rand标准函数可以用来获得随机数
为了使用这个标准函数需要包含stdlib.h头文件

srand标准函数用来设置随机数种子
使用这个标准函数的时候需要提供一个整数
    作为种子
不同种子得到的随机数不同
为了使用这个标准函数也需要包含stdlib.h头文件
任何程序只需要设置一次随机数种子

time标准函数可以用来获得当前时间
这个函数用一个整数表示得到的时间
一秒之内这个代表时间的整数不会变化
为了使用这个标准函数需要包含time.h头文件

流程控制语句可以让程序里的语句不再
    从上到下顺序执行
分支和循环都是流程控制语句



goto也是流程控制语句
它可以把任何一条语句指定成下一条语句
尽量不要使用goto语句

如果一个问题可以用多组数字的变化过程描述，
    而且不同数字的变化频率不同。这种
    问题就可以采用多重循环方式解决。
多重循环里外部循环的循环变量代表变化
    慢的数字，内部循环的循环变量代表
    变化快的数字

while关键字也可以用来编写循环
不方便使用for关键字编写的循环就应该
   采用while关键字编写
while循环格式如下
while (逻辑表达式) {
    反复执行的语句
}
这个格式表示反复执行大括号里面的语句，
   直到逻辑表达式为假结束

while循环交替执行逻辑表达式和大括号里面的
    语句
while循环首先进行逻辑表达式的计算
while循环有可能不执行大括号里面的语句

如果while循环的逻辑表达式永远为真
   就成为了死循环

while循环里也可以使用break;语句和continue;
    语句

do...while关键字也可以用来编写循环
do...while循环的格式如下
do {
    反复执行的语句
} while (逻辑表达式);
do...while循环小括号后边必须用分号结束
do...while循环也是交替执行逻辑表达式
    的计算和大括号里面的语句
do...while循环首先执行大括号里面的语句
do...while循环可以保证大括号里面的语句
    至少执行一次




scanf函数从键盘上获得数字的时候数字首先
    进入输入缓冲区，然后scanf函数从输入
    缓冲区里获得数字
先进入输入缓冲区的数据必须首先处理

采用如下两条语句可以把输入缓冲区里
    无法处理的数据清理掉
scanf("%*[^\n]");
scanf("%*c");

printf函数显示数据的时候首先把数据
   放到输出缓冲区里，然后在合适的时候
   计算机把输出缓冲区里的内容显示在
   屏幕上

在以下四种情况下输出缓冲区里的内容
   会显示在屏幕上
1.如果输出缓冲区里有'\n'字符则'\n'字符
    前面的内容会显示在屏幕上
2.当程序结束后它放在输出缓冲区里的内容
    会显示在屏幕上
3.输出缓冲区被充满后里面的内容会显示在
    屏幕上
4.使用fflush(stdout)语句强制把输出缓冲区
    里的内容显示在屏幕上




数组可以用来代表内存里一组连续的同类型
    存储区
这些存储区叫做数组的元素
数组也需要先声明然后才能使用
声明数组的时候除了提供类型名称和数组名称
    外还需要提供一个整数用来表示数组里
    的存储区个数
数组一旦存在则里面包含的存储区个数就
    不可以改变
数组通常不会作为整体使用，一般一次只
    使用其中的某个存储区

数组里每个存储区有一个编号，这个编号
    叫做数组的下标
第一个存储区的下标是0，向后依次递增
下标的有效范围从0开始到存储区个数减一
    为止，超过范围的下标不可以使用

数组名称和下标一起可以表示数组里的存储区

可以使用for循环依次处理数组里的每个存储区
这个循环里的循环变量依次代表每个有效下标

数组应该进行初始化
初始化数组的时候需要提供多个初始化数据，
    一个初始化数据初始化一个存储区。
初始化数组的时候需要把所有初始化数据写在
    一对大括号里面，相邻数据之间用逗号
    分开
如果初始化数据的个数比存储区个数多就把
    后面的初始化数据忽略
如果初始化数据个数比存储区个数少就把
    后面的存储区内容初始化成0
如果初始化数据个数和存储区个数一样就
    可以省略数组声明里的存储区个数

预习：
    1.数组
    2.变长数组
    3.多维数组







